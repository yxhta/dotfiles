# Interactive commit with confirmation
function claude_commit_interactive() {
    local diff_output=$(git diff --staged)
    
    if [[ -z "$diff_output" ]]; then
        echo "Error: No staged changes found"
        return 1
    fi
    
    echo "Analyzing staged changes..."
    local commit_msg=$(echo "$diff_output" | claude -p "Analyze this git diff and generate a Conventional Commits compliant commit message.
    Requirements:
    - Format: <type>[optional scope]: <description>
    - Select appropriate type: feat, fix, docs, style, refactor, perf, test, build, ci, chore
    - Keep description under 50 characters, imperative mood
    - Add scope if changes are focused on specific component

    Type guidelines:
    - feat: new features or functionality
    - fix: bug fixes
    - docs: documentation changes only
    - style: formatting, no code changes
    - refactor: code changes that neither fix bugs nor add features
    - perf: performance improvements
    - test: test-related changes
    - build: build system or dependencies
    - ci: CI configuration changes
    - chore: maintenance tasks
    Output only the commit message, no additional text." --model sonnet --max-turns 6)
    
    echo "\nProposed commit message:"
    echo "  $commit_msg"
    echo
    
    # Use read with default value 'y' so Enter key accepts
    echo -n "Commit with this message? [Y/n]: "
    read REPLY
    
    # Default to 'y' if user just pressed Enter
    if [[ -z "$REPLY" || "$REPLY" =~ ^[Yy]$ ]]; then
        git commit -m "$commit_msg"
        echo "✅ Commit completed successfully"
    else
        echo "❌ Commit cancelled"
    fi
}

# Aliases
alias ccmi='claude_commit_interactive'
