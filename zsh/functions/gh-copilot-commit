# Basic commit message generation with GitHub Copilot
function gh_copilot_commit() {
    local diff_output=$(git diff --staged)
    
    if [[ -z "$diff_output" ]]; then
        echo "Error: No staged changes found"
        return 1
    fi
    
    gh copilot suggest -t git "Analyze the following git diff and generate a git commit command following the Conventional Commits specification v1.0.0.

Requirements:
1. Use the format: <type>[optional scope]: <description>
2. Select the most appropriate type from: feat, fix, docs, style, refactor, perf, test, build, ci, chore
3. Add scope in parentheses if changes are focused on a specific component/module
4. Use '!' after type/scope if there are breaking changes, or add 'BREAKING CHANGE:' footer
5. Keep description under 50 characters, imperative mood (e.g., 'add feature' not 'added feature')
6. If multiple types of changes exist, prioritize the most significant one
7. Add a commit body if the changes are complex and need additional context

Type guidelines:
- feat: new features or functionality
- fix: bug fixes
- docs: documentation changes only
- style: formatting, missing semicolons, no code changes
- refactor: code changes that neither fix bugs nor add features
- perf: performance improvements
- test: adding or updating tests
- build: changes to build system or dependencies
- ci: changes to CI configuration
- chore: maintenance tasks, tooling

Diff to analyze:
$diff_output"
}

# Aliases
alias ghcm='gh_copilot_commit'
